#!/usr/bin/env python
"""
Implements a basic secret sharing scheme using Azmuth-Bloom

To use, create an instance of the AsmuthBloom class and provide
the following upon instaltiation:
	n: n >= 2
	k: 2 <= k <= n
	m[n+1]: List of pairwise co-prime integers satisfying the rules:
            (m[0] * m[n-k+2] * ... * m[n]) < (m[1] * ... * m[k])
	a: such that S + a * m[0] < m[1] * ... * m[k] where S is the secret

TODO:
There are still many improvements to be made:
  - Add auto generation of a (alpha)
  - Add auto generation of moduli and of k if n is given
  - Add default value for n
  - Throw exception when encoding secret that is larger than n can handle
"""
from maths import *
from random import randint

__author__ = "rmanders"
__status__ = "Development"

class AsmuthBloom:

    def __init__(self, n=None, k=None, a=None, m=None):
        self.n = n
        self.k = k
        self.a = a
        self.m = m
        self.aprod = reduce(lambda x,y: x*y, m[(n-k+2):])

                 
    def check_ab_sequence(self, m, k):
        if k < 2 or k > len(m):
            return False
        i = len(m)-k+1
        pk = reduce(lambda x,y: x*y, m[1:k+1])
        pm = reduce(lambda x,y: x*y, m[i:])*m[0]
        if(pm < pk):
            return True
        return False
                                   

    def encrypt(self, secret):
		"""encrypes a secret into shares"""
        if self.a is None:
            self.a = randint(1,self.aprod)
        b = secret + (self.a * self.m[0])
        shares = []
        for i in self.m[1:]:
            shares.append(((b % i), i))
        return shares
 
    def decrypt(self, shares):
		"""Attempts to decrypt a secret from shares generated by this instance"""
        a = []
        m = []
        for s in shares:
            a.append(s[0])
            m.append(s[1])
        return gencrt(a,m) % self.m[0]
    
# Test Code:
# ab = AsmuthBloom(3,4,51,[3,11,13,17,19])
# shares = ab.encrypt(2)
# print shares
# print ab.decrypt(shares)
